#!/Users/531-m31c/bin/python
##!/usr/bin/python
import sys


class Term:
	def __init__(self, value, degree, sign, side): #ex 4 * 7x = 3 we're focusing on the left term here
		self.value = value       # 4*7 = 28
		self.degree = degree     # degree = 1 coz x = x^1 
		self.sign = sign		 # 1 or -1
		self.side = side		 # 'l' or 'r'
		
def check_equation_format(equation):
	authorized_char = [ '0','1', '2', '3', '4', '5', '6', '7', '8', '9', '^', '+', '-', '*' , 'x', 'X', ' ', '=', '.']
	for c in equation:
		if c not in authorized_char:
			sys.exit("Equation contained illegal characters.")
	if '=' not in equation:
		sys.exit("This is not an equation.")
	eq_len = len(equation)
	i = 0
	while i < eq_len:
		if equation[i] == '^' and ( i == 0 or i == eq_len -1): #exponent bad format for sure |^ or ^|
			sys.exit("Bad use of exponent operator '^'.")
		if equation[i] == '^' and not (equation[i - 1] == 'x'):
			sys.exit("Missing 'x' before '^'.")
		if equation[i] == '^' and not equation[i + 1].isdigit():
			sys.exit("Invalid char after '^'.")
#		if equation[i] == '^' and equation[i + 1] > '2':
#			sys.exit("The polynomial degree is strictly greater than 2, I can't solve.")
		i += 1
 
	clean_eq = equation #remove spaces
	clean_eq_len = len(clean_eq)
	i = 0
	operands = ['*', '+', '-', '=', '.']

	while i < clean_eq_len:
		if (i == 0 and (clean_eq[i] == '+' or clean_eq[i] == '-')):
			i += 1
			continue
                if clean_eq[i] == '=' and i + 1 < clean_eq_len and (clean_eq[i + 1] == '+' or clean_eq[i + 1] == '-'):
                    i += 1
                    continue
		if clean_eq[i] in operands and (i == 0 or i == clean_eq_len - 1):
			sys.exit("Bad use of operator '" + clean_eq[i] + "'")
		if clean_eq[i] in operands and not (clean_eq[i - 1].isdigit() or (clean_eq[i - 1] == 'x' and clean_eq[i] != '.')) and ((clean_eq[i] == '+' or clean_eq[i] == '-') and clean_eq[i - 1] != '='):
			sys.exit("Invalid chars before operand '" + clean_eq[i] + "'")
		if clean_eq[i] in operands and not (clean_eq[i + 1].isdigit() or (clean_eq[i + 1] == 'x' and clean_eq[i] != '.')):
			sys.exit("Invalid chars after operand '" + clean_eq[i] + "'")
		
		i += 1

def parse_terms_strings(side):
	terms = []
	tmp_s = ""

	i = 0	
	for c in side: #parse left side, we're basically splitting on '+' or '-' and keeping the signs
		if (i == 0):
			i += 1
			tmp_s += c
			continue
		elif c == '+' or c == '-':
			terms.append(tmp_s)
			tmp_s = ""
		tmp_s += c

	terms.append(tmp_s)
	return terms

def strs_to_term(strs, side):
	sp = strs.split("*")
	len_sp = len(sp)
	if len_sp > 2:													# ... + 4 * 2x * 4x + ...
		sys.exit("Excessive multiplication, not polynomial form.")
	if len_sp == 2 and ('x' not in sp[0] and 'x' not in sp[1]):		# ... + 7 * 4 + ...
		sys.exit("Excessive multiplication, not polynomial form.")

	term = Term(0, 0, 0, side)

	if len_sp == 2:
		i = 0
		for c in sp['x' in sp[1]]:
			if c == 'x' and '^' not in sp['x' in sp[1]]:
				term.degree = 1
				break
			elif c == '^':
				term.degree = int(sp['x' in sp[1]][i + 1])
				break
			i += 1
		term.value = float(sp[not 'x' in sp[1]])
		term.sign = 1
		if term.value < 0:
			term.sign = -1
			#term.value *= -1
	else:
		if 'x' in sp[0]:
			i = 0
			for c in sp[0]:
				if c == 'x' and not '^' in sp[0]:
					term.degree = 1
					break
				elif c == '^':
					term.degree = int(sp[0][i + 1])
					break
				i += 1
			term.value = 1
			term.sign = 1
			if sp[0][0] == '-':
				term.sign = -1
		else:
			term.value = float(sp[0])
			term.sign = 1
			if term.value < 0:
				term.sign = -1
	#			term.value *= -1
				term.degree = 0
	return term

def reduce(terms):
	reduced_terms = []
	#Create needed terms to have form  'a * x^0 + b * x^1 + c * x^2 = 0'
	for x in range(g_degree + 1):
		reduced_terms.append(Term(0, x, 1, 'l'))
	#For intermediate steps bonus print before and after this
	#first we gonna pass all the terms to the left
	for t in terms:
		if t.side == 'r':
			t.sign *= -1
			t.value *= -1
			t.side = 'l'

	print("Passing all the terms to the left side:"),
	print_eq(terms)
	
	for t in terms:
		reduced_terms[t.degree].value += t.value
	print("Add terms of same degree together:"),
	print_eq(reduced_terms)
	
	return reduced_terms


# "5 * X^0 + 4 * X^1 - 9.3 * X^2 = 1 * X^0"
def parse_eq(eq):
	global g_degree
	print("-----------Intermediate steps-----------")
	sides = eq.split('=')
	
	left_s = parse_terms_strings(sides[0])
	right_s = parse_terms_strings(sides[1])
	

	termlst = []
	for t in left_s:
		termlst.append(strs_to_term(t, 'l'))
	for t in right_s:
		termlst.append(strs_to_term(t, 'r'))
	print("Parsing equation:"),
	print_eq(termlst)
	reduced = reduce(termlst)
	print("--------Intermediate steps break--------")
	
	print("Reduced:"),
	print_eq(reduced)
	#Let's find the real polynomial degree
	maxi = 0
	for x in reduced: 
#		print(vars(x))#debug
		if x.value != 0 and x.degree > maxi:
			maxi = x.degree
	g_degree = maxi #this is the real polynomial degree
	
	print("Polynomial degree: " + str(g_degree))
	if g_degree > 2:
		sys.exit("The polynomial degree is strictly greater than 2, I can't solve.")
	print(g_degree)
	resolvex(reduced)

def resolvex(tlst):
	global g_degree
	if g_degree == 0:
		zero_resolve(tlst)
#	elif g_degree == 1:
#		first_resolve(tlst)
#	elif g_degree == 2:
#		second_resolve(tlst)

def zero_resolve(tlst):
	if tlst[0].value == 0:
		print("The solution is:\nAll real numbers.")
	else:
		print("The solution is:\nNo solution.")

def str_count_digit(s):
	i = 0
	for c in s:
		if c > '9' or c < '0':
			break
		i += 1
	return i

def get_poly_degree(s):
	i = 0
	maxi = 0
	if 'x' in s:
		maxi = 1
	while i < len(s):
		if s[i] == '^':
			i += 1
			tmp = int(s[i: i + str_count_digit(s[i:len(s)])])
			if tmp > maxi:
				maxi = tmp
		i += 1
	return maxi

def print_eq(tlist):
	print("\033[92m"),
	i = 0
	bf = False
	for x in tlist:
		if bf == False and x.side == 'r':
			bf = True
			print("="),
			i = 0
		if x.value < 0:
				print("-"),
		elif x.value > 0 and i > 0:
				print("+"),
		if x.value != 0:
			if x.value / int(x.value) == 1: #no digits after dot
				print(int(x.value) if x.value > 0 else int(x.value) * -1),
			else:
				print(x.value if x.value > 0 else x.value * -1),
			if x.degree == 1:
				print("* X"),
			elif x.degree > 1:
				print("* X^" + str(x.degree)),
		i += 1

	empty_rside = True
	for t in tlist:
		if t.side == 'r':
			empty_rside = False
	if empty_rside:
		print("= 0"),

	print("\033[0m")


g_degree = 0
#main
if len(sys.argv) != 2:
	sys.exit("Incorrect number of argument")

eqx = sys.argv[1].lower()
eqx = eqx.replace(" ", "")
check_equation_format(eqx)
g_degree = get_poly_degree(eqx)
print("t=" + str(g_degree))
parse_eq(eqx)

